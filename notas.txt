========================================================
                   COMANDOS BÁSICOS
========================================================
ADD
use o comando `git add 'exemplo.txt'` 
    para adcionar um arquivo específico
use o comando `git add .`
    para adcionar todos os arquivos de uma vez só

COMMIT
use o comando `git commit 'exemplo.txt' -m "descrição"`
    para commitar um arquivo específico
use o comando `git commit -a -m "descrição"`
    para commitar todos os arquivos de uma vez só

PUSH
use o comando `git push`
    para enviar as alterações e novos arquivos

PULL
use o comando `git pull`
    para sincronizar o local com as mudanças do remoto
        ex: quando alguém atualiza ou adciona alguma funcionalidade
            da aplicação, então se utiliza o `git pull` para atualizar
            essas funcionalidades nos arquivos locais.

CLONE   
use o comando `git clone 'url do repositório(ex: https://github.com/Rubemvn/curso_git_01.git)' .`
    para clonar um repositório e baixar ele nos arquivos locais
    
LOG
use o comando `git log`
    para verificar o histórico de commit's feitos no seu repositório

MV
use o comando `git mv './exemplo_01/exemplo.txt' './exemplo_02/exemplo.txt'`
    para mover o arquivo de um local para o outro
use o comando `git mv './ex_01/exemplo.txt' './ex_01/exemplo_MODIFICADO.txt'`
    para alterar o nome de um determinado arquivo

CHECKOUT
use o comando `git checkout 'exemplo_01/exemplo.txt'`
    para o arquivo voltar a seu estado anterior a edição

IGNORE
crie um arquivo com o nome `.gitignore` e envie ele para o repositório
    dentro desse arquivo coloque o nome dos arquivos ou pastas que 
    vão ser ignorados e não seram enviados para o repositório
        ex: "exemplo.txt
            pasta_de_exemplo/*"

RESET
use o comando `git reset --hard origin/main`
    para resetar a branch antes das alterações e commits feitos
    até o último "git push"

=================================================================
                       COMANDOS AVANÇADOS
=================================================================

git branch - aparece o nome das branchs existentes e qual branch está sendo usada

git branch 'branch_example' - cria uma branch

git branch -d 'branch_example' - deleta uma branch
git branch -D 'branch_example' - deleta uma branch independente das mudanças feitas

git checkout 'branch_example' - entra na branch escolhida

git checkout -b 'branch_example' - cria a branch e tmabém muda para escolhida

git merge 'branch_example' - mescla os dados da branch atual com a branch escolhida,
    muito utilizado para fazer updates nas branchs e para enviar novas funcionalidades

git stash - joga as aleraçoes feitas em uma espécie de 'lixeira'
git stash list - lista as stash criadas
git stash apply '0' - recupera a stash selecionada
git stash show -p '0' - mostra as alerações na stash selecionada
git stash clear - deleta todas as stash criadas
git stash drop '0' - deleta stash selecionada

git tag -a 'example_tag' -m "nova tag" - cria uma tag naquela branch
    tag funciona como um tipo de checkpoint, no qual você pode voltar a qualquer momento
git tag - lista todas as tag criadas
git show 'nome da tag' - mostra os detalhes da tag selecionada
git checkout 'nome da tag' - entra na tag selecionada
git tag -d 'nome da tag' - deleta uma tag
git push origin 'nome da tag' - envia a tag selecionada para o repositório
git push origin --tags - envia todas as tags para o repositório
git merge 'nome da tag' - mescla a tag selecionada com uma branch ou até mesmo com outra tag

git push origin --delete 'nome do branch' - deleta um branch do remoto
git push origin :'nome do branch' - deleta um branch do remoto

git fetch -a - pega as todas as branchs do repositório

git pull - atualiza a branch atual com a mesma branch do remoto

git remote -v - lista os links do git push e git fetch
git remote rm origin - remove os links de push e fetch
git remote add origin 'link do repositório' - adciona o link para o push e fetch
    importante lembrar que ele reseta as configurações de git push, fetch, branchs e etc...

git submodule - mostra todos os submodulos
git submodule add 'link do submodulo' 'nome da pasta que o submodulo'- cria um submodulo
git push --recurse-submodule=on-demand - envia as alterações de um submodulo para o seu repositório

git show - apresenta informações detalhadas de um repositório
git show 'tag' - apresenta informações de uma tag

git diff - mostra as diferenças da branch local para a branch do remoto
git diff 'nome da branch' - mostra as diferenças da branch atual apra a branch selecionada
git diff HEAD:arquivo01.txt arquivo02.txt - mostra as diferenças do arquivos local e remoto

git shortlog - mostra todas as atualizações do repositório

git clean -f - força uma limpeza de arquivos que não foram adcionados ainda.

git gc - faz uma varredura no repositório, e elimina arquivos que el julga não ser mais útil

git fsck - verifica possíveis corrupções em nossos arquivos
    comando de rotina, utilizado para ver se está tudo certo com nossos arquivos.

git reflog - mostra todas as alterações feitas no seu repositório, em um espaço de 30 diferenças
    bom para mapear ações feitase e encontrar erros


